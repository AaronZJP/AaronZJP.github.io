<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aaron的博客</title>
  <subtitle>Stay foolish,Stay hungry!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="Aaronzjp.cn/"/>
  <updated>2017-10-25T08:29:13.821Z</updated>
  <id>Aaronzjp.cn/</id>
  
  <author>
    <name>Aaron_36</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信小程序开发(一)</title>
    <link href="Aaronzjp.cn/2017/10/23/WeChat%20Mini%20Apps%20(%E4%B8%80)/"/>
    <id>Aaronzjp.cn/2017/10/23/WeChat Mini Apps (一)/</id>
    <published>2017-10-23T06:25:38.000Z</published>
    <updated>2017-10-25T08:29:13.821Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​    最近公司有个很小的项目，要求用微信小程序来做，于是最近就在学习小程序的相关知识。一直是做 iOS 原生开发，Java Script、HTML 以及 CSS 都不会，微信小程序又和这类知识有关，所有也简单的学习和看了一下这方面的知识。关于前端的这部分会单独的总结成博
    
    </summary>
    
    
      <category term="微信小程序" scheme="Aaronzjp.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>What&#39;s new in iOS11</title>
    <link href="Aaronzjp.cn/2017/10/12/What-s-new-in-iOS11/"/>
    <id>Aaronzjp.cn/2017/10/12/What-s-new-in-iOS11/</id>
    <published>2017-10-12T03:06:03.000Z</published>
    <updated>2017-10-12T03:18:31.584Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;距离iOS11开发大会结束很久了，然而一天懒得跟猪🐷一样的，iOS11正式发布后也一直没有去整理这些东西，现在才整理一点点出来。下面就是在iOS11中新加入的一些东西，可能不是很全面，但是后续会有补充吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="WWDC2017" scheme="Aaronzjp.cn/tags/WWDC2017/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa 和 MVVM 的简单使用</title>
    <link href="Aaronzjp.cn/2017/08/28/ReactiveCocoa-and-MVVM/"/>
    <id>Aaronzjp.cn/2017/08/28/ReactiveCocoa-and-MVVM/</id>
    <published>2017-08-28T05:14:55.000Z</published>
    <updated>2017-11-16T07:07:08.337Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MVVM&quot;&gt;&lt;a href=&quot;#MVVM&quot; class=&quot;headerlink&quot; title=&quot;MVVM&quot;&gt;&lt;/a&gt;MVVM&lt;/h1&gt;&lt;p&gt;在 iOS 中最开始的时候以及我们一开始学习的时候就是使用的 MVC 的模式来进行iOS App 开发的。MVC 的模式总的来说就是分为三个部分 Model(数据模型)、View(界面，视图)、Controller(控制器)。&lt;/p&gt;
&lt;p&gt;在 MVC 中他们的通信方式如下图所示，该图来自斯坦福公开课中的 PDF 文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reactive Cocoa" scheme="Aaronzjp.cn/tags/Reactive-Cocoa/"/>
    
      <category term="MVVM" scheme="Aaronzjp.cn/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa的基本使用</title>
    <link href="Aaronzjp.cn/2017/08/03/Use-ReactiveCocoa/"/>
    <id>Aaronzjp.cn/2017/08/03/Use-ReactiveCocoa/</id>
    <published>2017-08-03T01:59:47.000Z</published>
    <updated>2017-08-28T05:13:25.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是ReactiveCocoa？&quot;&gt;&lt;a href=&quot;#什么是ReactiveCocoa？&quot; class=&quot;headerlink&quot; title=&quot;什么是ReactiveCocoa？&quot;&gt;&lt;/a&gt;什么是ReactiveCocoa？&lt;/h1&gt;&lt;p&gt;最近因为公司的一个项目因为是用 ReactiveCocoa 结合 MVVM 来写的，所以在我接手的时候我也打算继续使用这种模式，因为我觉得这种模式还是有一定的好处的，通过 ReactiveCocoa 的使用强化了项目中围绕数据变化所做的改变。所以最近还是学习一下 ReactiveCocoa 的一些基本的使用。&lt;/p&gt;
&lt;p&gt;ReactiveCocoa（其简称为RAC）是由Github工程师们开发的一个应用于iOS和OS X开发的函数响应式编程新框架。ReactiveCocoa 的灵感来源于 函数式响应式编程。ReactiveCocoa 的优点是可以很轻松的处理状态以及状态之间依赖过多的问题，同时也是一种很好的消息传递的机制。通过对 RACSignal (信号) 的使用，可以很好的处理事件流，以及事件的监控，状态改变的处理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="Aaronzjp.cn/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title>Swift-枚举</title>
    <link href="Aaronzjp.cn/2017/04/20/Swift-Enum/"/>
    <id>Aaronzjp.cn/2017/04/20/Swift-Enum/</id>
    <published>2017-04-20T07:01:27.000Z</published>
    <updated>2017-08-01T07:06:31.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 Swift 中枚举是一等类型。 Swift 中枚举是一个很强大的类型，在 C 语言中枚举会为一组整型值分配相关联的名称。但是在 Swift 中不是必须的，如果给枚举成员赋值(在 Swift 中又叫原始值)，则该值的类型可以是字符、字符串、整型、或者是一个浮点数。除了这些以为 Swift 中的枚举还可以指定任意类型的关联值到枚举成员中，还可以添加计算属性，实例方法，还可以定义构造函数，还可以遵守协议。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="Aaronzjp.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>自定义转场动画（ViewController Transition）</title>
    <link href="Aaronzjp.cn/2017/04/19/TransitionAnimation/"/>
    <id>Aaronzjp.cn/2017/04/19/TransitionAnimation/</id>
    <published>2017-04-19T09:28:41.000Z</published>
    <updated>2017-07-27T02:52:28.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;什么是转场动画，转场动画就是从一个 Controller 跳转到另一个 Controller 时呈现的动画。在现在的iOS App 中很多 App 都实现了自己的转场动画，要知道自定义转场动画在 iOS7 以前是没有这么轻松的，在 iOS7 以前要想自定义转场动画那就只能自己去一步一步的实现，很久以前我隐约记得我看过一篇文章是关于自定义控制器容易器转场动画的，大概意思就是自定&lt;/p&gt;
    
    </summary>
    
    
      <category term="转场动画" scheme="Aaronzjp.cn/tags/%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Swift-构造过程</title>
    <link href="Aaronzjp.cn/2017/03/27/Swift-Initializer/"/>
    <id>Aaronzjp.cn/2017/03/27/Swift-Initializer/</id>
    <published>2017-03-27T14:06:28.000Z</published>
    <updated>2017-07-31T19:35:42.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Swift 构造过程是在使用类、结构体或者枚举类型的实例之前所做的准备工作。在使用类型实例之前为了确保类型实例能够正确的实例化，需要在实例化过程中对存储属性等设置初始值，和一些必须执行和初始化的工作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="Aaronzjp.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift-方法</title>
    <link href="Aaronzjp.cn/2017/03/22/Swift-Method/"/>
    <id>Aaronzjp.cn/2017/03/22/Swift-Method/</id>
    <published>2017-03-22T04:57:57.000Z</published>
    <updated>2017-07-27T02:53:02.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 Swift 中方法分为两种，实例方法、类型方法。其中类型方法和 Obj-c 中的类方法相似的，类型方法是作用于类型本身的，实例方法则是作用于类型对应的实例。和 Obj-c 不同的是，在 Swift 中不仅可以给类定义方法，同时还可以给结构体和枚举定义方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="Aaronzjp.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS动画</title>
    <link href="Aaronzjp.cn/2017/03/07/Animation/"/>
    <id>Aaronzjp.cn/2017/03/07/Animation/</id>
    <published>2017-03-07T06:44:31.000Z</published>
    <updated>2017-11-14T03:01:19.047Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://onocdmhtw.bkt.clouddn.com/20170419149258946476275.jpg&quot; alt=&quot;20170419149258946476275.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;​    在iOS／MacOS中，基本上所有的动画都是由 Core Animation 这个框架来完成的。这个框架的主要功能就是渲染图形，以及动画的实现，使用 Core Animation 来实现图形渲染以及动画只需要配置一些简单的参数，告诉它动画应该什么时候开始，什么时候结束，以及状态等。 Core Animation 通过硬件加速自动的完成图形的绘制，渲染以及动画。&lt;/p&gt;
    
    </summary>
    
    
      <category term="动画" scheme="Aaronzjp.cn/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="Animation" scheme="Aaronzjp.cn/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>Swift-集合类型</title>
    <link href="Aaronzjp.cn/2017/03/05/Swift-CollectionTypes/"/>
    <id>Aaronzjp.cn/2017/03/05/Swift-CollectionTypes/</id>
    <published>2017-03-05T07:10:35.000Z</published>
    <updated>2017-08-01T07:55:09.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集合类型&quot;&gt;&lt;a href=&quot;#集合类型&quot; class=&quot;headerlink&quot; title=&quot;集合类型&quot;&gt;&lt;/a&gt;集合类型&lt;/h1&gt;&lt;p&gt;在 Swift 中集合类型主要有 Array、Sets、Dictionaries。和 O-bjc 中不同的是 Swift 中集合的可变类型和不可变类型并不是子类和父类的关系，而是同一个类。可变和不可变是通过变量类型来区分的，如果使用 var 来声明成变量那么就是可变的，如果使用 let 来声明成常量那么就是不可变的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="Aaronzjp.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>初识CALayer</title>
    <link href="Aaronzjp.cn/2016/12/01/iOS-CALayer/"/>
    <id>Aaronzjp.cn/2016/12/01/iOS-CALayer/</id>
    <published>2016-12-01T06:11:37.000Z</published>
    <updated>2017-07-27T02:57:07.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt; CALayer 和 UIView 类似，也是一些被层级关系树管理的块。 CALayer 和 UIView 一样的可以可以在其中展示图片，文本，通过方法或属性做动画和图形变换等等的界面上的显示相关的东西，可以说 UIView 能做到的 CALayer 基本上也能做到，但是 CALayer 和  UIView 最大的不同是 CALayer 不处理和用户的交互。因为  CALayer 不能很好的处理具体的响应链，无法响应事件的处理，即使在 CALayer 的方法中提供了触摸事件的检测方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="图层" scheme="Aaronzjp.cn/tags/%E5%9B%BE%E5%B1%82/"/>
    
      <category term="CALayer" scheme="Aaronzjp.cn/tags/CALayer/"/>
    
      <category term="Core Animation" scheme="Aaronzjp.cn/tags/Core-Animation/"/>
    
  </entry>
  
  <entry>
    <title>swift-函数</title>
    <link href="Aaronzjp.cn/2016/12/01/Swift%203.0-Function/"/>
    <id>Aaronzjp.cn/2016/12/01/Swift 3.0-Function/</id>
    <published>2016-12-01T06:11:37.000Z</published>
    <updated>2017-08-01T07:52:36.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://onocdmhtw.bkt.clouddn.com/20170419149259342224934.jpg&quot; alt=&quot;20170419149259342224934.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="Aaronzjp.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>方法调配技术（method swizzling）</title>
    <link href="Aaronzjp.cn/2016/09/19/Method-Swizzling/"/>
    <id>Aaronzjp.cn/2016/09/19/Method-Swizzling/</id>
    <published>2016-09-19T09:33:52.000Z</published>
    <updated>2017-07-27T02:55:04.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​    在前面的关于&lt;code&gt;runtime&lt;/code&gt;中已经说过&lt;code&gt;OC&lt;/code&gt;运行时语言，在其编译的时候就会把OC中的消息转换成一个类似于如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id objc_msgSend ( id self, SEL cmd, ... );&lt;/code&gt;结构的C语言函数，在程序运行的时候程序就会根据id所对应的类，以及传入的SEL选择子在该类的方法列表中去查找相对应的方法，并执行。利用这一特点，我们可以在运行期去改变选择子名称相对应的方法，这样我们既不需要查看到源代码，又没有必要去重写子类来覆写方法就能改变类本身的功能。这样一来新功能就会在类的所有实例中表现出来，而不仅限于那些重写子类的实例。这种方案就叫做“方法调配”（&lt;code&gt;method swizzling&lt;/code&gt;）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="runtime" scheme="Aaronzjp.cn/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>runtime-消息转发机制（message forwarding）</title>
    <link href="Aaronzjp.cn/2016/09/13/Message-Forwarding/"/>
    <id>Aaronzjp.cn/2016/09/13/Message-Forwarding/</id>
    <published>2016-09-13T03:48:39.000Z</published>
    <updated>2017-07-27T02:55:08.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​    上次在发送消息&lt;code&gt;objc_msgSend&lt;/code&gt;中提到了，如果在当前的类的方法列表中如果找不到对应的选择子的方法就会执行消息转发（&lt;code&gt;message forwarding&lt;/code&gt;），在消息的转发过程中我们就可以在程序中告诉程序应该怎样去处理这样未知的消息，可以在消息的转发过程中设置挂钩，用来执行预定的逻辑处理方式，来做到当程序中的某个类找不到对应的方法时不至于导致程序的崩溃。&lt;/p&gt;
&lt;p&gt;​    其中消息转发机制详细的来划分一共分为3个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态方法解析&lt;/li&gt;
&lt;li&gt;备援接收者&lt;/li&gt;
&lt;li&gt;完整的消息转发&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="runtime​" scheme="Aaronzjp.cn/tags/runtime%E2%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>iOS发送消息</title>
    <link href="Aaronzjp.cn/2016/09/08/objc-msgSend/"/>
    <id>Aaronzjp.cn/2016/09/08/objc-msgSend/</id>
    <published>2016-09-08T14:23:28.000Z</published>
    <updated>2017-07-27T02:53:39.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;code&gt;OC&lt;/code&gt; 语言中，对象调用方法我们称之为发送消息，或者叫做“传递消息”（&lt;code&gt;pass a message&lt;/code&gt;）。消息具有“名称”（&lt;code&gt;name&lt;/code&gt;）或“选择子”（&lt;code&gt;selector&lt;/code&gt;），实际上就是方法名称，可以接受参数，也可以有返回值。在 &lt;code&gt;OC&lt;/code&gt; 中我们是这样发送消息的，结构如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id retrunValue = [someObject messageName:parameter];&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="runtime" scheme="Aaronzjp.cn/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS-对象关联</title>
    <link href="Aaronzjp.cn/2016/08/18/Associated%20Object/"/>
    <id>Aaronzjp.cn/2016/08/18/Associated Object/</id>
    <published>2016-08-18T10:35:51.000Z</published>
    <updated>2017-07-27T02:57:42.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;关联对象就是给某个对象关联一些其他的对象，这些被关联的对象通过键（key）来区分管理。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个&lt;code&gt;Person&lt;/code&gt;类，&lt;code&gt;Aaron&lt;/code&gt;是这个&lt;code&gt;Person&lt;/code&gt;类的实例也就是对象。现在又增加了一个&lt;code&gt;Car&lt;/code&gt;类，且有一个&lt;code&gt;Audi&lt;/code&gt;的实例，我们需要给&lt;code&gt;Aaron&lt;/code&gt;实例增加关联一辆Audi车。显然常规的做法是把&lt;code&gt;Car&lt;/code&gt;类作为属性添加到&lt;code&gt;Aaron&lt;/code&gt;中，但是在有的某些特殊的情况下我们无法对&lt;code&gt;Aaron&lt;/code&gt;这个实例直接进行操作，也无法通过继承去操作，那么这个时候就可以用关联对象来解决这个问题了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="runtime" scheme="Aaronzjp.cn/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS网络编程NSURLConnection／NSURLSession</title>
    <link href="Aaronzjp.cn/2016/08/11/iOS-NetWork-Programming-NSURLConnectionAndNSURLSession/"/>
    <id>Aaronzjp.cn/2016/08/11/iOS-NetWork-Programming-NSURLConnectionAndNSURLSession/</id>
    <published>2016-08-11T04:16:49.000Z</published>
    <updated>2017-07-27T02:56:59.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;iOS网络编程是最基础常用的知识，可以说是从开始学习iOS的时候就应该要必备的基础知识。但是平常在项目中都使用比较成熟的第三方网络请求的框架（比如：AFNetworking）来替代了苹果官方所提供的网络请求API，对苹果提供的API相关的东西就逐渐的忽略了。为了理解其相关知识和原理，所以对这块知识复习一下，顺便整理成博客。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络编程" scheme="Aaronzjp.cn/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>iOS10 权限Crash问题</title>
    <link href="Aaronzjp.cn/2016/08/09/iOS10-CrashOfPermission/"/>
    <id>Aaronzjp.cn/2016/08/09/iOS10-CrashOfPermission/</id>
    <published>2016-08-09T03:22:30.000Z</published>
    <updated>2017-07-27T02:56:10.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​    手机升级iOS10beat版本后，公司项目在真机上测试出现了崩溃的现象。一打开App就Crash了，一开始还不太确定问题，以为是项目本身代码的问题。找了半天，后来居然在控制台的输出中找到了问题（控制台输出的内容太多了不好找啊😂）。&lt;/p&gt;
&lt;p&gt;​    控制台输出的信息如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="疑难杂症" scheme="Aaronzjp.cn/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>UINavigationBar</title>
    <link href="Aaronzjp.cn/2016/05/31/UINavigationBar/"/>
    <id>Aaronzjp.cn/2016/05/31/UINavigationBar/</id>
    <published>2016-05-31T10:31:30.000Z</published>
    <updated>2017-10-12T03:19:30.659Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;NavigationBar 是在大多数App中很常见的一个控件，它总是显示在 App 窗口的顶部，其作用就是用来显示当前视图的层级。&lt;/p&gt;
&lt;p&gt;NavigationBar 主要包含了这样几个部分，left(back) Button 、 CenterTitle 、 RightButton。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://onocdmhtw.bkt.clouddn.com/2017033114909574652892.png&quot; alt=&quot;2017033114909574652892.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="UIKit" scheme="Aaronzjp.cn/tags/UIKit/"/>
    
      <category term="UINavigationBar" scheme="Aaronzjp.cn/tags/UINavigationBar/"/>
    
  </entry>
  
  <entry>
    <title>iOS - 多线程</title>
    <link href="Aaronzjp.cn/2016/05/17/Multiple-Thread/"/>
    <id>Aaronzjp.cn/2016/05/17/Multiple-Thread/</id>
    <published>2016-05-17T01:40:48.000Z</published>
    <updated>2017-07-27T02:54:50.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;很多时候在我们的软件项目中我们都需要用到多线程，在iOS的项目中也不例外。多线程是编程中重要的一项技术，多线程又分为并发和串行，在此基础上又分为同步线程和异步线程。以下这几点很容易混淆，当然GCD中还有并发队列和串行队列，这个在下面的GCD中有提到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS多线程" scheme="Aaronzjp.cn/tags/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
